--------------------------------------------------------------------------------------
1. First Validate the given input line.
    a. Check if the Timestamp is an integer
    b. Check if 5 arguments are present in each line
    c. Check if the buy and sell rates are double.

    If any of the above is false, we throw an exception and error out.

--------------------------------------------------------------------------------------
DESIGN NOTES:
- Initially thought of using a temp variable to store the best Buy price and best sell price
  but realized that, we should have the history of all the prices.
  REASON:
    - If some bank updates an entry at a later point, then its previous entry becomes 
      invalid. 
    - So we have to immediately find the next best sell and SELL values.

    - Decided to achieve the above by using a heap.

    PROBLEM WITH HEAP:
        - We can't find an element in the heap.
          This is necessary to when the SAME BANK updates its values.
          In that case, we want to remove the previous entry.

        - Same problem with Priority Queue

    So went with ORDERED_MAP:
        - All looked good.
        - Finally realized that ordered map stores only unique values.

    RESULT:
        USE MULTISET.


ALGORITHM:
    - For each line in the quote, print the best Buy and Sell values available till that
      point.
--------------------------------------------------------------------------------------

1. Created a Class that would represent all data for a specific Currency Pair.
    - i.e. All the buy sell values for all available banks will be stored in this object.

    - For every Currency pair, a new object will be created.

2. Each object stores the following data.
      _currencyPairName:  EURUSD
      _bankNames       :  Bank1, Bank2, Bank3, .....
      _buyValues       :  1.1,   2.2,   3.3, .....
      _sellValues      :  1.5,   2.5,   3.5, .....

      VECTOR:
      - When a bank that is already existing, gives a new quote for BUY / SELL, then 
        we remove the old entry from the vector and push the new entry into the vector.
        This would however cause rearranging all elements in the vector.

        But we could have MILLION entries (quotes) coming from one bank. this would take a
        whole lot of space.

        The order of the BANKs is only 200. So rearranging all 200 items is not as bad as
        storing millions of items.
 
3. Created a MAP "mapCurPairNames" that stores the CURRENCY PAIRs.
    - This is used to find when a new currency pair comes.
    - This map will be in the order of 200.

4. Created a MAP "mapBankNames" to store the BANK NAMEs.
    - This is used to find when the same bank updates with a new quote for BUY / SELL.
    - This map will be in the order of 200.
        - If the bank name has an older quote THEN
            - We remove the older entries from the HEAP / MULTISETs
            - We also remove the older entries from the BANK NAME map.

            - We do not remove the older entries from the ORIGINAL vector.

5. Created two MULTISETs one for BUY and one for SELL
    - This multiset will be in the order of 200.
    - These operate like a HEAP.
    - BUY HEAP "buyPriceMap" stores in descending order, so that the first element will
      have the best buy value.
    - SELL HEAP "sellPriceMap" stores in ascending order, so that the first element will
      have the best sell value.

        - The MULTISET data types are STRUCT that hold the BANK NAME and PRICE.
        - Also the less than operator is overloaded.

--------------------------------------------------------------------------------------
